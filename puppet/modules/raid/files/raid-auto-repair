#!/bin/bash
#
# Description:	Check for RAID volumes with mismatched blocks and automatically repair them
# Author:	Paul Gear
# Created:	2011-05-10

set -e
set -u

PROG=`basename $0`
SLEEP_TIME=10
WAIT_TIME=3600
(( WAIT_COUNT=WAIT_TIME/SLEEP_TIME ))
REPAIR=1
CHECK=1
WAIT_REPAIR=1
WAIT_CHECK=1

# return all the volumes with non-zero mismatch_cnt values
get_mismatch_vols()
{
	grep -l '[1-9]' /sys/block/*/md/mismatch_cnt 2>/dev/null|cut -d/ -f4
}

log()
{
	LEVEL="$1"
	shift
	logger -t $PROG -p local0.$LEVEL $STDERR "$@"
}

error()
{
	log error "$@"
	exit 1
}

info()
{
	if [ -t 0 ]; then
		STDERR=-s
	else
		STDERR=""
	fi
	log info "$@"
}


action()
{
	SYNC_ACTION="$1"
	VOL="$2"

	info "Running $SYNC_ACTION on $VOL"
	echo $SYNC_ACTION > /sys/block/$VOL/md/sync_action
}

wait_idle()
{
	SYNC_ACTION="$1"
	VOL="$2"
	sleep $SLEEP_TIME
	CURR_ACTION=`head -n 1 /sys/block/$VOL/md/sync_action|awk '{print $1}'`
	count=1
	while [ "$CURR_ACTION" != "idle" ]; do
		sleep $SLEEP_TIME
		CURR_ACTION=`head -n 1 /sys/block/$VOL/md/sync_action|awk '{print $1}'`
		if [ "$CURR_ACTION" = "idle" ]; then
			break
		fi
		(( ++count ))
		if [ "$count" -ge "$WAIT_COUNT" ]; then
			error "Waited $WAIT_TIME seconds for $VOL to $SYNC_ACTION but it's still $CURR_ACTION - exiting"
		fi
	done
}

# process command line
for arg; do
	case $arg in
		--no-check)
			CHECK=0
			;;
		--no-wait-check)
			WAIT_CHECK=0
			;;
		--no-repair)
			REPAIR=0
			;;
		--no-wait-repair)
			WAIT_REPAIR=0
			;;
	esac
done

# TODO: add pre-check here

VOLS=`get_mismatch_vols`
for VOL in $VOLS; do
	# reset variables to defaults for each volume checked
	repair=$REPAIR
	check=$CHECK
	wait_repair=$WAIT_REPAIR
	wait_check=$WAIT_CHECK

	# only repair arrays that are clean or active
	STATE=`head -n 1 /sys/block/$VOL/md/array_state`
	case $STATE in
		clean|active)
			info "$VOL is in '$STATE' state"
			;;
		*)
			info "$VOL is in '$STATE' state - not repairing"
			continue
			;;
	esac

	# only repair arrays that are not repairing already
	ACTION=`head -n 1 /sys/block/$VOL/md/sync_action`
	case $ACTION in
		idle)
			;;
		repair)
			info "$VOL is already in '$STATE' state - skipping repair"
			repair=0
			;;
		*)
			info "$VOL is performing '$ACTION' - not repairing"
			continue
			;;
	esac

	# start the repair
	info "Mismatch count for $VOL is `cat /sys/block/$VOL/md/mismatch_cnt`"
	if [ "$repair" -eq 1 ]; then
		action repair $VOL
	fi

	# wait for repair to complete
	if [ "$wait_repair" -eq 1 ]; then
		wait_idle repair $VOL
	fi

	# repair is done - do a check
	if [ "$check" -eq 1 ]; then
		action check $VOL
	fi

	# wait for the check to complete
	if [ "$wait_check" -eq 1 ]; then
		wait_idle check $VOL
		# report status of check
		info "New mismatch count for $VOL is `cat /sys/block/$VOL/md/mismatch_cnt`"
	fi
done

if [ -n "$VOLS" ]; then
	info "Checked volumes:" $VOLS
	ERR_VOLS=`get_mismatch_vols`
	if [ -n "$ERR_VOLS" ]; then
		error "Remaining errored volumes:" $ERR_VOLS
	fi
fi

